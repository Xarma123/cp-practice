#include <bits/stdc++.h>
using namespace std;

// Returns true if character is digit
bool isDigit(char ch)
{
	switch(ch)
	{
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			return (true);
	}
	return (false);
} 

// Returns true if character is an operator
bool isOperator(char ch) 
{ 
	switch(ch)
	{
		case '+':
		case '-':
		case '*':
		case '/':
		case '>':
		case '<':
		case '=':
			return (true);
	} 
	return (false); 
}

// Returns true if character is a Delimiter
bool isDelimiter(char ch) 
{ 
	bool isOp = isOperator(ch);
	bool isDem = false;
	switch(ch)
	{
		case ' ':
		case ',':
		case ';':
		case '(':
		case ')':
		case '[':
		case ']':
		case '{':
		case '}':
		case '\n':
			isDem = true;
	}
	return (isOp|isDem);
} 

// Returns true if string is a valid identifier
bool validIdentifier(string str) 
{ 
	bool isDem = isDelimiter(str[0]);
	bool isDig = isDigit(str[0]);
	return !(isDig|isDem); 
} 

// Returns true if string is a keyword
bool isKeyword(string str)
{
	
	string keywords[32] = {"Debug","Define","For","To","ArraySize","Str","Next",
							"Random","Import","EndImport","OpenConsole","Input","PrintN", "Dim"};

	int i;
	bool flag = false;
	for(i = 0; i < 32; ++i)
	{
		if(str.compare(keywords[i]) == 0)
		{
			flag = true;
			break;
		}
	}
	return flag;
} 

// Returns true if string is an integer 
bool isInteger(string str) 
{ 
	int i, len = str.size(); 

	if (len == 0) 
		return (false); 
	for (i = 0; i < len; i++)
	{ 
		if (!isDigit(str[i]) || (str[i] == '-' && i > 0)) 
			return (false); 
	} 
	return (true); 
} 

// Returns true if string is a real number
bool isRealNumber(string str) 
{ 
	int i, len = str.size(); 
	bool hasDecimal = false; 

	if (len == 0) 
		return (false); 
	for (i = 0; i < len; i++) { 
		if (!isDigit(str[i]) && str[i] != '.' || (str[i] == '-' && i > 0)) 
			return (false); 
		if (str[i] == '.') 
			hasDecimal = true; 
	} 
	return (hasDecimal); 
} 

// Function to find sub string
char* subString(string str, int left, int right) 
{ 
	int i; 
	char* subStr = (char*)malloc( 
				sizeof(char) * (right - left + 2)); 

	for (i = left; i <= right; i++) 
		subStr[i - left] = str[i]; 
	subStr[right - left + 1] = '\0'; 
	return (subStr); 
} 

// Parsing the input STRING. 
void parse(string str, unordered_map<string,vector<string>> &m) 
{ 
	int left = 0, right = 0; 
	int len = str.size(); 

	while (right <= len && left <= right) { 
		if (isDelimiter(str[right]) == false) 
			right++; 

		if (isDelimiter(str[right]) == true && left == right)
		{ 
			if (isOperator(str[right]) == true)
			{
				string temp(1, str[right]);
				m["operator"].push_back(temp);
			}

			right++; 
			left = right; 
		}
		else if (isDelimiter(str[right]) == true && left != right 
				|| (right == len && left != right)) 
		{ 
			string subStr = str.substr(left, right - left);
			// subString(str, left, right - 1);
			string temp = subStr;
			cout<<"|"<<subStr<<"|\n";

			if (isKeyword(subStr) == true)
				m["keyword"].push_back(subStr);

			else if (isInteger(subStr) == true)
				m["integer"].push_back(subStr);

			else if (isRealNumber(subStr) == true)
				m["real number"].push_back(subStr);

			else
				m["others"].push_back(temp);

			left = right; 
		} 
	}
	return; 
}

// Loading the input file
char* load_file(char const* path)
{
    char* buffer = 0;
    long length;
    FILE * f = fopen (path, "rb"); //was "rb"

    if (f)
    {
      fseek (f, 0, SEEK_END);
      length = ftell (f);
      fseek (f, 0, SEEK_SET);
      buffer = (char*)malloc ((length+1)*sizeof(char));
      if (buffer)
      {
        fread (buffer, sizeof(char), length, f);
      }
      fclose (f);
    }
    buffer[length] = '\0';
    return buffer;
} 

// Main Function 
int main() 
{ 
	char *str = load_file("test.txt"); 
	unordered_map<string,vector<string>> m;

	parse(str, m);

	for(auto i: m)
	{
		cout<<"Class: "<<i.first<<"\n";
		for(auto j: i.second)
			cout<<j<<" ";
		cout<<"\n\n";
	}

	return 0; 
} 

